
name: pls
help: |
  Project Level Shortcuts (pls) is a command-line tool designed to streamline 
  your workflow by allowing you to create, manage, and execute custom aliases 
  for frequently used commands.

  Key features:
   * Easy alias creation and modification
        Add, remove, rename, or change functionality of aliases with a simple
        CLI interface.
   * Project Level Specificity 
        Aliases can be defined at both project and global levels, with
        project-specific aliases taking precedence.
   * Intuitive command execution:
        Run a command associated with an alias using the 'pls' prefix.
        e.g. pls open, pls test, pls deploy
   * Easily shareable aliases:
        Streamline your team's workflow by sharing aliases across projects, or
        make setup of your product dead-easy for your users.
        Just add a pls file to the project's root directory, and you're off!

  To see examples of how to use pls, run 'pls <command> --help'
environment_variables:
  - name: pls_rc
    help: The path to the configuration file to use. Contains additional environment variables for advanced users. Default is determined by '\$HOME/.config/pls/.plsrc'. 
    default: $HOME/.config/pls/.plsrc
args:
  - name: alias
    help: |  
      The alias to execute, add, or delete.
      When left empty, will launch an interactive picker to select and execute an alias.
    required: false
    validate: not_empty
  - name: command_args
    help: Optional arguments to pass to the command when executing a parameterized command.
    repeatable: true
    required: false
flags:
  - short: -a
    long: --add
    help: |
      OPERATION: Adds a new alias for a --command to the pls file at a given --scope.
    needs: [ --command, --scope ]
    validate: is_only_operation
  - short: -d
    long: --delete
    help: |
      OPERATION: Delete the alias from the pls file at given --scope. 
    needs: [ --scope ]
    validate: is_only_operation
  - short: -l
    long: --list
    help: |
      OPERATION: List all aliases available in the current directory.
      Or, list aliases only from --scope <[g]lobal, [l]ocal, [a]ll>.
      Use with --print to print the command associated with each alias.
    validate: is_only_operation
  - short: -c
    long: --command
    arg: command
    validate: not_empty
    help: |
      ARGFLAG: Supplies a command to associate with the alias in the  --add operation.
      Pass the command as a string, newline characters ('\\\n') are allowed.
  - short: -s
    long:  --scope
    arg: scope
    allowed: [ g, global, l, local, h, here, a, all ]
    help: |
      ARGFLAG: The selected scope for --add, --delete, and --list operations.
      The 'all' scope is exclusive to --list.
      The 'here' scope is excluded from --list.
  - short: -p
    long: --print
    help: |
      Prints the command instead of executing it. Useful for piping to other commands or shells.
      Or, if used in conjunction with --list, it additionally prints the command for each alias.
  - short: -f
    long: --force
    help: |
      Overwrite the alias if it already exists when using the --add operation.
  - long: --clear-cache
    help: |
      Before doing anything, clears the cache of all commands that have been run with pls.
  - long: --this-does-nothing
    help: |
      This flag is just for testing purposes.
      It does nothing. It is only used to test the before hook.
    private: true
dependencies:
  yaml_parser:
    command: [ yq ]
    help: See https://github.com/mikefarah/yq for installation instructions.
