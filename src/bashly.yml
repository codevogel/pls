
name: pls
help: |
  Project Level Shortcuts (pls) is a command-line tool designed to streamline 
  your workflow by allowing you to create, manage, and execute custom aliases 
  for frequently used commands.

  Key features:
   * Easy alias creation and modification
        Add, remove, rename, or change functionality of aliases with a simple
        CLI interface.
   * Project Level Specificity 
        Aliases can be defined at both project and global levels, with
        project-specific aliases taking precedence.
   * Intuitive command execution:
        Run a command associated with an alias using the 'pls' prefix.
        e.g. pls open, pls test, pls deploy
   * Easily shareable aliases:
        Streamline your team's workflow by sharing aliases across projects, or
        make setup of your product dead-easy for your users.
        Just add a pls file to the project's root directory, and you're off!

  To see examples of how to use pls, run 'pls <command> --help'
environment_variables:
  - name: pls_rc
    help: The path to the configuration file to use. Contains additional environment variables for advanced users. Default is determined by '\$HOME/.config/pls/.plsrc'. 
    default: $HOME/.config/pls/.plsrc
args:
  - name: alias
    help: The alias to execute.
    required: false
    validate: not_empty
  - name: command_args
    help: Arguments to pass to the command.
    repeatable: true
    required: false
flags:
  - short: -p
    long: --print
    help: |
      Print the command instead of executing  it. (Useful if you want to pipe the command into a different shell.)
  - short: -a
    long: --add
    help: |
      Adds the alias with the given --command to the pls file at --destination.
    needs: [ --command, --target ]
    conflicts: [ --print, --delete ]
  - short: -c
    long: --command
    arg: command
    help: The command to associate with the alias.
    validate: not_empty
    needs: [ --add ]
  - short: -t
    long: --target
    arg: target
    help: |
      Add the alias to the pls file for the desired context. (g)lobal, (l)ocal, or (h)ere. ('here' means 'use the CWD, even if a local file exists')
    validate: not_empty
    allowed: [ g, l, h, global, local, here ]
  - short: -f
    long: --force
    help: |
      Overwrite the alias if it already exists.
    needs: [ --add ]
  - short: -d
    long: --delete
    help: |
      Delete the alias from the pls file at --destination.
    needs: [ --target ]
    conflicts: [ --print, --add ]
  - short: -x
    long: --execute
    arg: something
    allowed: [ a, b, c]

#   - name: list_aliases
#     alias: [ l ] 
#     help: |
#       List all aliases available for invocation in the current directory.
#     flags:
#       - short: -l
#         long: --local
#         help: |
#           Lists only aliases available in the local context.
#         conflicts: [ --global, --all ]
#       - short: -g
#         long: --global
#         help: |
#           Lists only aliases available in the global context.
#         conflicts: [ --local, --all ]
#       - short: -a
#         long: --all
#         help: |
#           Shows aliases in local and global context, even if local alias overwrites global.
#         conflicts: [ --local, --global ]
#       - short: -c
#         long: --command
#         help: |
#           Also show the command associated with each alias.
#     examples:
#       - |
#         pls list_aliases
#           Lists all aliases avaliable in the current directory.
#       - |
#         pls l -gc
#           Lists all aliases that are stored in the file at \$PLS_GLOBAL, and additionally shows the command associated with each alias.
#   - name: pick_alias
#     alias: [ p ]
#     help: |
#       Pick an alias from the list of available aliases to execute.
#       Note: This supports fuzzy finder 'fzf' if you have it installed.
#     examples:
#       - |
#         pls pick_alias
#           Starts an interactive prompt to select an alias to execute.
#         pls p
#           Same as above.
#         pls
#           Same as above.
#   - name: clear_cache
#     help: |
#       Clear the cache of all commands that have been run with pls.
#     examples:
#       - |
#         pls clear_cache
#   - name: this_does_nothing
#     help: |
#       This command is just for testing purposes.
#       It does nothing. It is only used to test the before hook.
#     private: true
dependencies:
  yaml_parser:
    command: [ yq ]
    help: See https://github.com/mikefarah/yq for installation instructions.
